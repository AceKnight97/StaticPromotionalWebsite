{"version":3,"sources":["Helpers/auth.js","Pages/NotFound.js","Pages/PrivateRoute/index.js","logo.svg","Pages/Greeting/index.js","Helpers/customHooks.js","Pages/main.js","App.js","Redux/Reducers/initialState.js","Constants/index.js","Redux/Reducers/login.js","Redux/Reducers/index.js","Config/index.js","Helpers/fetch-client.js","Redux/Sagas/login.js","Redux/Sagas/index.js","Redux/Store/localStorage.js","Redux/Store/index.js","index.js"],"names":["localStorage","global","window","auth","login","data","console","log","user","isSuccess","username","_id","userId","role","setDatalogin","JSON","stringify","getDataLogin","parse","undefined","userName","isMD","isNurse","logout","clear","NotFound","Component","PrivateRoute","component","exact","path","authenticated","render","props","to","pathname","defaultProps","Greeting","initialState","useState","state","setState","newState","prevState","expectedState","_","assign","useMergeState","className","classnames","src","logo","alt","SignIn","Main","name","React","App","loading","AppFlowActions","LOGIN_REQUEST","LOGIN_COMPLETE","GET_ALL_DATA_REQUEST","GET_ALL_DATA_COMPLETE","RELOAD_PAGE_REQUEST","LOGOUT_REQUEST","LOGOUT_COMPLETE","action","type","appReducer","combineReducers","rootReducer","HOST","fetchClient","loginRequest","loginFlow","INFINITE","take","request","email","result","put","fork","root","persistedState","serializedState","getItem","err","loadState","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","runSaga","run","rootSaga","configureStore","sessionService","initSessionService","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.594b0aaa.chunk.js","sourcesContent":["const { localStorage } = global.window;\n\nconst auth = {\n  login(data) {\n    console.log('login data: ', data);\n    const { user, isSuccess } = data;\n    const { username, _id } = user;\n\n    localStorage.username = username;\n    localStorage.userId = _id;\n    localStorage.isSuccess = isSuccess;\n    localStorage.role = user.role;\n  },\n\n  setDatalogin(data) {\n    localStorage.login = JSON.stringify(data);\n  },\n\n  getDataLogin() {\n    return localStorage.login ? JSON.parse(localStorage.login) : undefined;\n  },\n\n  isSuccess() {\n    return localStorage.isSuccess;\n  },\n\n  userId() {\n    return localStorage.userId;\n  },\n\n  username() {\n    return localStorage.userName;\n  },\n\n  role() {\n    return localStorage.role;// || 'MD'; // || 'NURSE';\n  },\n  isMD() {\n    return localStorage.role === 'MD';\n  },\n  isNurse() {\n    return localStorage.role === 'NURSE';\n  },\n\n  logout() {\n    localStorage.clear();\n  },\n};\n\nexport default auth;\n","import React, { Component } from 'react';\n\nexport default class NotFound extends Component {\n  render() {\n    console.log('mct report error');\n    return (\n      <div>\n        Not Found\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst PrivateRoute = ({\n  component: Component, exact = false, path, authenticated,\n}) => (\n  <Route\n    exact={exact}\n    path={path}\n    render={(props) => (\n      authenticated ? (<Component {...props} />) : (<Redirect to={{ pathname: '/greeting' }} />)\n    )}\n  />\n);\n\nPrivateRoute.defaultProps = {\n  exact: false,\n  authenticated: false,\n};\n\nPrivateRoute.propTypes = {\n  exact: PropTypes.bool,\n  component: PropTypes.shape().isRequired,\n  path: PropTypes.string.isRequired,\n  authenticated: PropTypes.bool,\n};\n\nexport default PrivateRoute;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport _ from 'lodash';\nimport { } from 'antd';\nimport { useMergeState } from '../../Helpers/customHooks';\nimport logo from '../../logo.svg';\n\nconst Greeting = (props) => {\n  const [state, setState] = useMergeState({\n    data: [],\n  });\n\n  const { className } = props;\n\n  return (\n    <div className={classnames('greeting-wrapper', className)}>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  );\n};\n\nGreeting.defaultProps = {\n  className: '',\n};\nGreeting.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default Greeting;\n","import { useRef, useState, useEffect } from 'react';\nimport _ from 'lodash';\n\nexport const useMergeState = (initialState) => {\n  const [state, setState] = useState(initialState);\n  const setMergedState = (newState) => setState((prevState) => {\n    const expectedState = _.assign(prevState, newState);\n    return { ...expectedState };\n  });\n  return [state, setMergedState];\n};\n\nexport const useUpdateEffect = (effect, dependencies = [], cleanup) => {\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n    return cleanup;\n  }, dependencies);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport NotFound from './NotFound';\nimport PrivateRoute from './PrivateRoute';\nimport Greeting from './Greeting';\n\nconst SignIn = () => <div><span>Sign In</span></div>;\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <main className=\"div-root\">\n        <Router>\n          <Switch>\n            <Route path=\"/sign-in\" name=\"Sign In\" component={SignIn} />\n            <Route path=\"/greeting\" name=\"Greeting\" component={Greeting} />\n            <PrivateRoute path=\"/\" name=\"full\" component={NotFound} />\n            <Route path=\"*\" name=\"notFound\" component={NotFound} />\n          </Switch>\n        </Router>\n      </main>\n    );\n  }\n}\n\nMain.defaultProps = {\n};\n\nMain.propTypes = {\n};\nexport default Main;\n\n// <Router>\n// <Switch>\n//   <Route path=\"/sign-in\" name=\"Sign In\" component={SignIn} />\n//   {/* <PrivateRoute path=\"/\" name=\"full\" component={Full} authenticated={!!authenticated} /> */}\n// </Switch>\n// </Router>\n","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './Pages/main';\nimport 'antd/dist/antd.css';\nimport './Styles/style.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default {\n  loading: {},\n  login: {\n    user: {},\n  },\n};\n","import {\n  StepData, GeneralInformationData, AfibHistoryData, QualitiOfLifeTitles,\n} from './newPatientData';\n\nconst AppFlowActions = {\n  LOGIN_REQUEST: 'LOGIN_REQUEST',\n  LOGIN_COMPLETE: 'LOGIN_COMPLETE',\n\n  GET_ALL_DATA_REQUEST: 'GET_ALL_DATA_REQUEST',\n  GET_ALL_DATA_COMPLETE: 'GET_ALL_DATA_COMPLETE',\n\n  RELOAD_PAGE_REQUEST: 'RELOAD_PAGE_REQUEST',\n\n  LOGOUT_REQUEST: 'LOGOUT_REQUEST',\n  LOGOUT_COMPLETE: 'LOGOUT_COMPLETE',\n};\nexport default AppFlowActions;\n\nexport const PNMenu = ['Registered', 'Assigned'];\nexport const AFIB_HISTORY = [\n  'Afib diagnosed time',\n  'How were you diagnosed with AFib',\n  'Cardioversion',\n  'Received electronic shocks',\n  'Current symptoms',\n  'Past medical history',\n  'Medication used',\n  'Medication using',\n  'Hospitalized',\n];\nexport const AFIB_INFORMATION = [\n  'AFib confirmed via',\n  'Pattern of AFib',\n  'Heart valve status',\n];\nexport const COMPLETE_BLOOD_COUNT = [\n  'Date',\n  'Summary',\n  'Attachment',\n];\nexport const LIVER_FUNCTION_TEST = [\n  'Date',\n  'Summary',\n  'Attachment',\n];\nexport const LEAD_ECG = [\n  'Date',\n  'Summary',\n  'Attachment',\n];\nexport const EXERCISE_STRESS_TESTING = [\n  'Date',\n  'Summary',\n  'Attachment',\n];\nexport const ECHOCARDIOGRAM = [\n  'Date',\n  'LVEF',\n];\nexport const BIOFLUX_DIAGNOSIS = [\n  'Diagnosis info',\n  'Technician comments',\n  'Attachment',\n];\nexport const PAST_MEDICAL_CONDITIONS = [\n  'Hypertension',\n  'Diabetes mellitus',\n  'Myocardial infarction',\n];\n\nexport const MessageData = {\n  ServerErr: 'A temporary server error has occurred. Please try again.',\n  ExpiredText: 'Your login session has expired, please try again.',\n  FailGenerate: 'Failed to generate serial numbers. Please try again.',\n  SuccessGenerate: 'Generate serial number successfully.',\n  InvalidCode: 'Invalid code provided, please request a code again.',\n  InvalidCodeDisplay: 'Verification code is invalid. Please try again!',\n  InvalidNewPassword: 'New password is invalid. Please try again!',\n  PasswordNotMatch: 'The passwords do not match.\\nPlease try again!',\n  InvalidEx: 'The file could not be uploaded.\\nOnly files with the following extensions are allowed: PNG, JPEG, JPG.',\n  InvalidSize: 'Please enter a file with a valid file size no larger than 20MB.',\n  IncorrectUsername: 'Incorrect username or password.',\n  InvalidCurPas: 'Invalid current password. Please try again!',\n  CodeMisMatch: 'CodeMismatchException',\n  CreatedPartner: 'You have just created a new partner.',\n  WrongEmailF: 'Email is wrong format!',\n  WrongPhoneF: 'Phone is wrong format!',\n  IncorrectEnterEmail: 'Incorrectly entered email!',\n  InvalidEmail: 'Invalid email!',\n  SendCodeToNewEmail: 'A verification code has been sent to your new email.',\n  SuccessChangeEmail: 'Your email has been changed.',\n  ErrSPAlready: 'Error: Service Partner already exist!',\n  ErrSPAlreadyConverted: 'Service partner already exists!',\n  Limit100: 'Please enter a value less than or equal to 100.',\n  PassTooShort: 'That password is too short. Please make sure the password must be at least 8 characters.',\n  PassUpperLower: 'The password includes the use of both upper-case and lower-case letters.',\n  PassIncludesDigits: 'The password must include one or more numerical digits.',\n  InvalidUserName: 'Invalid username!',\n  TheSameEmail: 'New Email cannot be same as your old Email.',\n  ExceededLimit: 'Attempt limit exceeded, please try after some time.',\n  ExceededErr: 'InvalidParameterException',\n  NoInternet: 'Could not connect to server. Please check your internet connection.',\n  NoInternetErrCode: 'NetworkError',\n  NotFoundUser: 'UserNotFoundException',\n  NotVerifyEmailMes: 'Cannot reset password for the user as there is no registered/verified email or phone_number.',\n  NotVeriNaviMes: 'is not verified. Do you want to verify this email?',\n  NotFPMes: 'is not verified. Please go to your Account Settings and choose Change Email option for Email verification.',\n  IsGoForVeri: 'Your email has been verified.',\n  UpdateModelImgErr: 'Failed to update model image.',\n  ChangeModelImgMsg: 'Model image has been changed successfully.',\n  EmptyTableMes: 'There is no data to display',\n};\n\nexport const NewPatientData = {\n  StepData,\n  GeneralInformationData,\n  AfibHistoryData,\n  QualitiOfLifeTitles,\n};\n\nexport const EHRA_SCORE = [\n  {\n    title: 'None - 1',\n    content: 'Normal daily activity discontinued',\n  },\n  {\n    title: 'Mild - 2',\n    content: 'Normal daily activity not affected; symptoms not troublesome to patient',\n  },\n  {\n    title: 'Moderate - 3',\n    content: 'Normal daily activity not affected but patient troubled by symptoms',\n  },\n  {\n    title: 'Severe - 4',\n    content: 'Normal daily activity affected',\n  },\n  {\n    title: 'Disabling - 5',\n    content: 'Normal daily activity discontinued',\n  },\n];\n\nexport const CHA2DS2VASCScoreData = [\n  {\n    value: 'Congestive heart failure',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Hypertension',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Age ≥ 75',\n    isCheck: false,\n    suffix: 2,\n  },\n  {\n    value: 'Age 65-74',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Diabetes mellitus',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Stroke/TIA/thrombo-embolism',\n    isCheck: false,\n    suffix: 2,\n  },\n  {\n    value: 'Vascular disease',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Sex Female',\n    isCheck: false,\n    suffix: 1,\n  },\n];\nexport const AdjustedStrokeRateData = ['0.0', 1.3, 2.2, 3.2, 4.0, 6.7, 9.8, 9.6, 6.7, 15.2];\n\nexport const HASBLEDClinicalCharacteristicData = [\n  {\n    value: 'Hypertension',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Abnormal liver function',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Abnormal renal function',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Stroke',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Bleeding',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Labile INRs',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Elderly (Age >65)',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Drugs',\n    isCheck: false,\n    suffix: 1,\n  },\n  {\n    value: 'Alcohol',\n    isCheck: false,\n    suffix: 1,\n  },\n];\n\nexport const BleedsPer100PatientYears = [\n  `Risk was 0.9% in one validation study (Lip 2011) and 1.13 bleeds per 100 patient-years in another validation study (Pisters 2010).\\n\nAnticoagulation should be considered: Patient has a relatively low risk for major bleeding (~1/100 patient-years).`,\n\n  `Risk was 3.4% in one validation study (Lip 2011) and 1.02 bleeds per 100 patient-years in another validation study (Pisters 2010).\\n\nAnticoagulation should be considered: Patient has a relatively low risk for major bleeding (~1/100 patient-years).`,\n\n  `Risk was 4.1% in one validation study (Lip 2011) and 1.88 bleeds per 100 patient-years in another validation study (Pisters 2010).\\n\nAnticoagulation should be considered: Patient has a relatively low risk for major bleeding (~2/100 patient-years).`,\n\n  `Risk was 5.8% in one validation study (Lip 2011) and 3.72 bleeds per 100 patient-years in another validation study (Pisters 2010).\\n\nAnticoagulation should be considered: Patient is at high risk for major bleeding.`,\n\n  `Risk was 8.9% in one validation study (Lip 2011) and 8.7 bleeds per 100 patient-years in another validation study (Pisters 2010).\\n\nAnticoagulation should be considered: Patient is at high risk for major bleeding.`,\n\n  `Risk was 9.1% in one validation study (Lip 2011) and 12.5 bleeds per 100 patient-years in another validation study (Pisters 2010).\\n\nAnticoagulation should be considered: Patient is at high risk for major bleeding.`,\n\n  `Scores greater than 5 were too rare to determine risk, but are likely over 10%.\nAlternatives to anticoagulation should be considered: Patient is at extremely high risk for major bleeding.`,\n\n  `Scores greater than 5 were too rare to determine risk, but are likely over 10%.\nAlternatives to anticoagulation should be considered: Patient is at extremely high risk for major bleeding.`,\n\n  `Scores greater than 5 were too rare to determine risk, but are likely over 10%.\nAlternatives to anticoagulation should be considered: Patient is at extremely high risk for major bleeding.`,\n\n  `Scores greater than 5 were too rare to determine risk, but are likely over 10%.\nAlternatives to anticoagulation should be considered: Patient is at extremely high risk for major bleeding.`,\n];\n\nexport const AfibConfirmData = ['ECG', 'Holter', 'Bioflux'];\nexport const AfibPatternData = ['Paroxysmal', 'Persistent', 'Long-standing persistent', 'Permanent', 'Valvular'];\nexport const HeartValveIssuseData = ['No issue', 'Valvular Heart Disease', 'Heart vale replacement'];\n\nexport const ValvularHeartDiseaseData = [\n  'Valvular stenosis (narrowing)',\n  'Valvular prolapse (slipping out of place)',\n  'Regurgitation (leaking)',\n];\nexport const MitralValveStatusData = [\n  'Normal', 'Progressive mitral stenosis', 'Severe mitral stenosis', 'Very severe mitral stenosis',\n];\n\nexport const KEY_MEDICATION = 'f4b34cb4b9df55b5cde78387358edc32';\n// export const URL_SEARCH_MEDICATION = 'https://api.drugbankplus.com/v1/us';\nexport const URL_SEARCH_MEDICATION = 'https://api-js.drugbank.com/v1/us';\n","import AppFlowActions from '../../Constants';\nimport initialState from './initialState';\nimport auth from '../../Helpers/auth';\nimport { convertLoginData } from '../../Ultis';\n\nconst login = (state = initialState.login, action) => {\n  switch (action.type) {\n    case AppFlowActions.LOGIN_COMPLETE:\n      return action.data;\n    case AppFlowActions.LOGOUT_COMPLETE:\n      return action;\n    default:\n      return state;\n  }\n};\n\nexport default login;\n","import { combineReducers } from 'redux';\nimport initialState from './initialState';\nimport auth from '../../Helpers/auth';\nimport AppFlowActions from '../../Constants';\nimport login from './login';\n\nconst appReducer = combineReducers({\n  login,\n});\n\nfunction rootReducer(state, action) {\n  if (action.type === AppFlowActions.LOGOUT_REQUEST) {\n    auth.logout();\n    return initialState;\n  }\n\n  return appReducer(state, action);\n}\n\nexport default rootReducer;\n","const HOST = 'http://service-cloud-1.appspot.com';\n// const HOST = 'http://localhost:8080';\n\nexport const LOGIN_URL = `${HOST}/user/login`;\nexport const CREATE_USER_URL = `${HOST}/user/login`;\nexport const GET_ALL_CHECKIN_URL = `${HOST}/checkin/getall`;\nexport const GET_ALL_BOOKING_URL = `${HOST}/booking/getall`;\n","async function fetchRequest(myRequest) {\n  const response = await fetch(myRequest);\n  const body = await response.json();\n  return body;\n}\n\nfunction fetchClient({ url, method, body }) {\n  const defaultHeaders = {\n    'Content-Type': 'application/json',\n  };\n\n  const options = {\n    method,\n    body: JSON.stringify(body),\n    headers: defaultHeaders,\n  };\n\n  const request = new Request(url, options);\n  return fetchRequest(request);\n}\n\nexport default fetchClient;\n","import {\n  put, call, take, fork,\n} from 'redux-saga/effects';\nimport _ from 'lodash';\n\nimport { LOGIN_URL } from '../../Config';\nimport auth from '../../Helpers/auth';\nimport AppFlowActions from '../../Constants';\n\n// import login from '../reducers/login';\nimport fetchClient from '../../Helpers/fetch-client';\n\nfunction fetchUser(data) {\n  const { email, password } = data;\n  try {\n    const options = {\n      url: LOGIN_URL,\n      method: 'POST',\n      body: { email, password },\n    };\n\n    return fetchClient(options);\n  } catch (error) {\n    return null;\n  }\n}\n/**\n * Log in saga\n */\n\nexport function* loginRequest() {\n  const INFINITE = true;\n  while (INFINITE) {\n    const request = yield take(AppFlowActions.LOGIN_REQUEST);\n    // yield put({ type: AppFlowActions.LOADING_COMPLTE, isLoading: true });\n\n    const { data } = request;\n    const { email } = data;\n    const md = 'nhabanh@itrvn.com'; // MD\n    // other accounts will be nurse\n    const result = { isSuccess: true, user: { role: email === md ? 'MD' : 'NURSE', ...data } };\n    if (result?.isSuccess) auth.login(result);\n    yield put({ type: AppFlowActions.LOGIN_COMPLETE, data: result });\n\n    // const { email, password } = data;\n    // const nurse = 'nurse@itrvn.com';\n    // const md = 'md@itrvn.com';\n    // const tempPassword = 'Welcome1';\n    // let result = {};\n    // if ((email === nurse || email === md) && password === tempPassword) {\n    //   console.log(\"it's nurse\");\n    //   result = { isSuccess: true, user: { role: email === nurse ? 'NURSE' : 'MD' } };\n    // } else result = { isSuccess: false, message: 'Invalid' };\n    // if (result.isSuccess) auth.login(result);\n\n    // const result = yield call(fetchUser, { ...data });\n    // if (result && !_.isEmpty(result)) {\n    //   if (result.isSuccess) auth.login(result);\n    //   yield put({ type: AppFlowActions.LOGIN_COMPLETE, data: result });\n    //   if (result?.isSuccess) yield put({ type: AppFlowActions.GET_ALL_DATA_REQUEST });\n    //   // yield put({ type: AppFlowActions.LOADING_COMPLTE, isLoading: false });\n    // }\n  }\n}\n\nexport default function* loginFlow() {\n  yield fork(loginRequest);\n}\n","import { fork } from 'redux-saga/effects';\nimport loginFlow from './login';\n\nexport default function* root() {\n  yield fork(loginFlow);\n}\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    // Ignore write errors.\n  }\n};\n","import { createStore, applyMiddleware } from 'redux';\n\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../Reducers';\nimport rootSaga from '../Sagas';\nimport { loadState } from './localStorage';\n\nconst persistedState = loadState();\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  return {\n    ...createStore(\n      rootReducer,\n      persistedState,\n      applyMiddleware(sagaMiddleware),\n    ),\n    runSaga: sagaMiddleware.run(rootSaga),\n  };\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { sessionService } from 'redux-react-session';\n\nimport App from './App';\nimport configureStore from './Redux/Store';\n\nconst store = configureStore();\nsessionService.initSessionService(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}